// sfm-cube.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "sfm-cube.h"
#include "blepo.h"
#include <stdio.h>
#include <string.h>
#include <fstream>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// The one and only application object

CWinApp theApp;

using namespace std;
using namespace blepo;

std::vector<CPoint> image1(61);
std::vector<CPoint> image2(61);
std::vector<CPoint> image3(61);
std::vector<CPoint> image4(61);
std::vector<CPoint> image5(61);
std::vector<CPoint> image6(61);
std::vector<CPoint> image7(61);
std::vector<CPoint> image8(61);
std::vector<CPoint> image9(61);
std::vector<CPoint> image10(61);
std::vector<CPoint> image11(61);
std::vector<CPoint> image12(61);
std::vector<CPoint> image13(61);
std::vector<CPoint> image14(61);
std::vector<CPoint> image15(61);
std::vector<CPoint> image16(61);
std::vector<CPoint> image17(61);


char x111[]="2.7665323e+002  6.6033410e+001  1.1259217e+001  8.6509217e+000  6.4729263e+001  2.7469700e+002  2.2057488e+002  1.1868837e+002  1.7134332e+002  2.2399828e+002  2.4952765e+001  3.8646314e+001  5.2339862e+001  9.3029955e+000  9.9550693e+000  1.0607143e+001  5.0709678e+001  3.6690092e+001  2.2670507e+001  2.2220507e+002  1.6971313e+002  1.1722120e+002  2.3410541e+002  2.4763594e+002  2.6116647e+002  2.7518606e+002  2.7567512e+002  2.7616417e+002  6.5055300e+001  6.5381337e+001  6.5707373e+001  1.6759389e+002  1.1461290e+002  6.1631911e+001  1.1758799e+002  1.1795478e+002  1.1832157e+002  1.7012068e+002  1.7052823e+002  1.7093577e+002  2.2265337e+002  2.2310167e+002  2.2354997e+002  2.3241072e+001  2.3811636e+001  2.4382201e+001  3.7179148e+001  3.7668203e+001  3.8157258e+001  5.1117224e+001  5.1524770e+001  5.1932316e+001  7.5529233e+001  1.2838796e+002  1.8124668e+002  8.9426554e+001  1.4216302e+002  1.9489948e+002  1.0332388e+002  1.5593807e+002  2.0855227e+002";
char y111[]="2.6786842e+002  2.8386842e+002  2.3418421e+002  2.1973684e+001  7.2500000e+001  5.7342105e+001  5.1315789e+000  2.7986842e+002  2.7586842e+002  2.7186842e+002  2.4660526e+002  2.5902632e+002  2.7144737e+002  7.5026316e+001  1.2807895e+002  1.8113158e+002  5.9868421e+001  4.7236842e+001  3.4605263e+001  6.1131579e+001  6.4921053e+001  6.8710526e+001  1.8184210e+001  3.1236842e+001  4.4289473e+001  1.0997368e+002  1.6260526e+002  2.1523684e+002  1.2534211e+002  1.7818421e+002  2.3102632e+002  9.3421052e+000  1.3552631e+001  1.7763158e+001  1.2150000e+002  1.7428947e+002  2.2707895e+002  1.1765789e+002  1.7039474e+002  2.2313158e+002  1.1381579e+002  1.6650000e+002  2.1918421e+002  8.7605263e+001  1.4060526e+002  1.9360526e+002  1.0018421e+002  1.5313158e+002  2.0607895e+002  1.1276316e+002  1.6565789e+002  2.1855263e+002  3.0500000e+001  2.6394737e+001  2.2289474e+001  4.3236842e+001  3.9236842e+001  3.5236842e+001  5.5973684e+001  5.2078947e+001  4.8184210e+001";

char x2[]="2.9088825e+002  8.3517281e+001  1.5312212e+001  1.1867512e+001  8.1450461e+001  2.8813249e+002  2.2130530e+002  1.3536002e+002  1.8720277e+002  2.3904551e+002  3.2363479e+001  4.9414747e+001  6.6466014e+001  1.2728687e+001  1.3589862e+001  1.4451037e+001  6.4054724e+001  4.6658987e+001  2.9263249e+001  2.3646198e+002  1.8479148e+002  1.3312097e+002  2.3801210e+002  2.5471890e+002  2.7142569e+002  2.8882143e+002  2.8951037e+002  2.9019931e+002  8.1967166e+001  8.2483871e+001  8.3000576e+001  1.6894585e+002  1.1658641e+002  6.4226959e+001  1.3368073e+002  1.3424050e+002  1.3480026e+002  1.8539430e+002  1.8599712e+002  1.8659994e+002  2.3710786e+002  2.3775375e+002  2.3839963e+002  3.0038307e+001  3.0813364e+001  3.1588422e+001  4.7347927e+001  4.8036867e+001  4.8725806e+001  6.4657546e+001  6.5260369e+001  6.5863191e+001  8.1450461e+001  1.3363767e+002  1.8582489e+002  9.8673964e+001  1.5068894e+002  2.0270392e+002  1.1589747e+002  1.6774021e+002  2.1958295e+002";
char y2[]="2.6939035e+002  2.8799561e+002  2.3926754e+002  2.7521930e+001  7.7135965e+001  5.7644737e+001  7.1447368e+000  2.8334429e+002  2.7869298e+002  2.7404167e+002  2.5144956e+002  2.6363158e+002  2.7581359e+002  8.0458332e+001  1.3339474e+002  1.8633114e+002  6.4732456e+001  5.2328947e+001  3.9925439e+001  6.2517544e+001  6.7390351e+001  7.2263158e+001  1.9769737e+001  3.2394737e+001  4.5019737e+001  1.1058114e+002  1.6351754e+002  2.1645395e+002  1.2985088e+002  1.8256579e+002  2.3528070e+002  1.2239035e+001  1.7333333e+001  2.2427632e+001  1.2503344e+002  1.7780373e+002  2.3057401e+002  1.2021601e+002  1.7304167e+002  2.2586732e+002  1.1539857e+002  1.6827960e+002  2.2116063e+002  9.2806468e+001  1.4568750e+002  1.9856853e+002  1.0515460e+002  1.5798026e+002  2.1080592e+002  1.1750274e+002  1.7027302e+002  2.2304331e+002  3.4886513e+001  2.9847588e+001  2.4808662e+001  4.7345395e+001  4.2361842e+001  3.7378290e+001  5.9804276e+001  5.4876097e+001  4.9947917e+001";

char x3[]="3.0739862e+002  1.1299309e+002  1.5426267e+001  1.2513825e+001  1.0862442e+002  3.0594240e+002  2.0910369e+002  1.6159447e+002  2.1019585e+002  2.5879724e+002  3.9817973e+001  6.4209678e+001  8.8601384e+001  1.3241936e+001  1.3970046e+001  1.4698157e+001  8.4596771e+001  6.0569122e+001  3.6541474e+001  2.5661291e+002  2.0728341e+002  1.5795391e+002  2.3331337e+002  2.5752305e+002  2.8173272e+002  3.0630646e+002  3.0667051e+002  3.0703457e+002  1.0971659e+002  1.1080875e+002  1.1190092e+002  1.5995622e+002  1.1080876e+002  6.1661291e+001  1.5886405e+002  1.5977419e+002  1.6068433e+002  2.0801152e+002  2.0873963e+002  2.0946774e+002  2.5715899e+002  2.5770507e+002  2.5825115e+002  3.7360599e+001  3.8179723e+001  3.8998848e+001  6.1479262e+001  6.2389400e+001  6.3299539e+001  8.5597925e+001  8.6599078e+001  8.7600231e+001  8.5734447e+001  1.3492742e+002  1.8412039e+002  1.0980760e+002  1.5904608e+002  2.0828456e+002  1.3388076e+002  1.8316475e+002  2.3244873e+002";
char y3[]="2.7002778e+002  2.9382310e+002  2.4897807e+002  3.7565789e+001  8.3326023e+001  5.7700292e+001  1.1024854e+001  2.8787427e+002  2.8192544e+002  2.7597661e+002  2.6018933e+002  2.7140058e+002  2.8261184e+002  9.0418859e+001  1.4327193e+002  1.9612500e+002  7.1885965e+001  6.0445906e+001  4.9005848e+001  6.4106725e+001  7.0513158e+001  7.6919590e+001  2.2693714e+001  3.4362573e+001  4.6031433e+001  1.1078216e+002  1.6386404e+002  2.1694591e+002  1.3595029e+002  1.8857456e+002  2.4119883e+002  1.7660088e+001  2.4295322e+001  3.0930555e+001  1.2965826e+002  1.8239693e+002  2.3513560e+002  1.2336623e+002  1.7621930e+002  2.2907237e+002  1.1707420e+002  1.7004167e+002  2.2300914e+002  1.0180172e+002  1.5459759e+002  2.0739346e+002  1.1318458e+002  1.6592325e+002  2.1866192e+002  1.2456743e+002  1.7724890e+002  2.2993037e+002  4.2427814e+001  3.5849781e+001  2.9271747e+001  5.3925073e+001  4.7404240e+001  4.0883406e+001  6.5422331e+001  5.8958698e+001  5.2495066e+001";

char x4[]="3.1299424e+002  1.3030530e+002  1.0485023e+001  7.5264977e+000  1.2808641e+002  3.1003571e+002  1.9021544e+002  1.7597753e+002  2.2164977e+002  2.6732200e+002  4.0440092e+001  7.0395162e+001  1.0035023e+002  8.2661290e+000  9.0057603e+000  9.7453917e+000  9.7946432e+001  6.7806454e+001  3.7666476e+001  2.6454839e+002  2.1906106e+002  1.7357374e+002  2.2017051e+002  2.5012558e+002  2.8008064e+002  3.1077534e+002  3.1151497e+002  3.1225461e+002  1.2864113e+002  1.2919585e+002  1.2975058e+002  1.4454320e+002  9.8870969e+001  5.3198733e+001  1.7417469e+002  1.7477563e+002  1.7537658e+002  2.1970824e+002  2.2035541e+002  2.2100259e+002  2.6524179e+002  2.6593520e+002  2.6662860e+002  3.8359880e+001  3.9053284e+001  3.9746688e+001  6.8453631e+001  6.9100808e+001  6.9747985e+001  9.8547382e+001  9.9148331e+001  9.9749281e+001  8.3292484e+001  1.2891849e+002  1.7454450e+002  1.1338623e+002  1.5896601e+002  2.0454579e+002  1.4347998e+002  1.8901354e+002  2.3454709e+002";
char y4[]="2.6400000e+002  2.9442105e+002  2.5236842e+002  4.2105263e+001  8.1473684e+001  5.2842105e+001  9.0000000e+000  2.8681579e+002  2.7921052e+002  2.7160526e+002  2.6288158e+002  2.7339473e+002  2.8390789e+002  9.4671052e+001  1.4723684e+002  1.9980263e+002  7.1631579e+001  6.1789474e+001  5.1947368e+001  6.0000000e+001  6.7157894e+001  7.4315789e+001  1.9960526e+001  3.0921052e+001  4.1881579e+001  1.0563158e+002  1.5842105e+002  2.1121053e+002  1.3471053e+002  1.8794737e+002  2.4118421e+002  1.7276316e+001  2.5552632e+001  3.3828947e+001  1.2744079e+002  1.8056579e+002  2.3369079e+002  1.2017105e+002  1.7318421e+002  2.2619737e+002  1.1290132e+002  1.6580263e+002  2.1870395e+002  1.0468092e+002  1.5741447e+002  2.1014803e+002  1.1469079e+002  1.6759210e+002  2.2049342e+002  1.2470066e+002  1.7776974e+002  2.3083881e+002  4.3950658e+001  3.5953947e+001  2.7957237e+001  5.4072368e+001  4.6355263e+001  3.8638158e+001  6.4194079e+001  5.6756579e+001  4.9319079e+001";

char x5[]="3.2180184e+002  1.6403687e+002  1.3967742e+001  1.0889401e+001  1.6095853e+002  3.1949309e+002  1.6942396e+002  2.0347811e+002  2.4291936e+002  2.8236060e+002  5.1485024e+001  8.9002306e+001  1.2651959e+002  1.1658986e+001  1.2428572e+001  1.3198157e+001  1.2344125e+002  8.5923965e+001  4.8406683e+001  2.7985945e+002  2.4022581e+002  2.0059217e+002  2.0694124e+002  2.4445853e+002  2.8197581e+002  3.2007028e+002  3.2064747e+002  3.2122465e+002  1.6172812e+002  1.6249770e+002  1.6326728e+002  1.2979032e+002  9.0156680e+001  5.0523041e+001  2.0131366e+002  2.0203514e+002  2.0275663e+002  2.4089920e+002  2.4157258e+002  2.4224597e+002  2.8048474e+002  2.8111002e+002  2.8173531e+002  4.9176268e+001  4.9945854e+001  5.0715439e+001  8.6693551e+001  8.7463136e+001  8.8232721e+001  1.2421083e+002  1.2498042e+002  1.2575000e+002  8.8040323e+001  1.2767396e+002  1.6730760e+002  1.2555761e+002  1.6519125e+002  2.0482489e+002  1.6307489e+002  2.0270853e+002  2.4234217e+002";
char y5[]="2.6389181e+002  3.1161111e+002  2.6482749e+002  5.7108187e+001  1.0295614e+002  5.7108187e+001  1.0324561e+001  2.9968129e+002  2.8775146e+002  2.7582164e+002  2.7652339e+002  2.8821930e+002  2.9991521e+002  1.0903801e+002  1.6096784e+002  2.1289766e+002  9.1494152e+001  8.0032163e+001  6.8570175e+001  6.8570175e+001  8.0032163e+001  9.1494152e+001  2.2020467e+001  3.3716374e+001  4.5412281e+001  1.0880409e+002  1.6050000e+002  2.1219590e+002  1.5511988e+002  2.0728363e+002  2.5944737e+002  2.2020467e+001  3.3716374e+001  4.5412281e+001  1.4354094e+002  1.9558772e+002  2.4763450e+002  1.3196199e+002  1.8389181e+002  2.3582164e+002  1.2038304e+002  1.7219591e+002  2.2400877e+002  1.2055848e+002  1.7254679e+002  2.2453509e+002  1.3207895e+002  1.8412573e+002  2.3617252e+002  1.4359942e+002  1.9570468e+002  2.4780994e+002  5.6932748e+001  4.5295321e+001  3.3657894e+001  6.8453216e+001  5.6874269e+001  4.5295321e+001  7.9973684e+001  6.8453216e+001  5.6932748e+001";

char x6[]="3.2132028e+002  1.8452765e+002  1.4481567e+001  1.2214286e+001  1.8301613e+002  3.1905300e+002  1.4825115e+002  2.1872581e+002  2.5292397e+002  2.8712212e+002  5.6993088e+001  9.9504609e+001  1.4201613e+002  1.2781106e+001  1.3347927e+001  1.3914747e+001  1.4031567e+002  9.7615208e+001  5.4914747e+001  2.8504378e+002  2.5103456e+002  2.1702535e+002  1.9095161e+002  2.3365208e+002  2.7635254e+002  3.1961982e+002  3.2018664e+002  3.2075346e+002  1.8339401e+002  1.8377189e+002  1.8414977e+002  1.1424193e+002  8.0232718e+001  4.6223502e+001  2.1745046e+002  2.1787558e+002  2.1830069e+002  2.5150691e+002  2.5197927e+002  2.5245162e+002  2.8556337e+002  2.8608295e+002  2.8660254e+002  5.5434332e+001  5.5953917e+001  5.6473503e+001  9.8087558e+001  9.8559908e+001  9.9032258e+001  1.4074078e+002  1.4116590e+002  1.4159101e+002  8.8923963e+001  1.2293318e+002  1.5694240e+002  1.3162442e+002  1.6563364e+002  1.9964286e+002  1.7432489e+002  2.0833410e+002  2.4234332e+002";
char y6[]="2.5581579e+002  3.1455263e+002  2.7002632e+002  6.6342105e+001  1.1086842e+002  5.1184211e+001  5.7105263e+000  2.9986842e+002  2.8518421e+002  2.7050000e+002  2.8115790e+002  2.9228948e+002  3.0342105e+002  1.1726316e+002  1.6818421e+002  2.1910527e+002  9.9736841e+001  8.8605263e+001  7.7473684e+001  6.6105263e+001  8.1026315e+001  9.5947368e+001  1.7078947e+001  2.8447369e+001  3.9815790e+001  1.0234211e+002  1.5350000e+002  2.0465790e+002  1.6178947e+002  2.1271053e+002  2.6363158e+002  2.0868421e+001  3.6026316e+001  5.1184210e+001  1.4692763e+002  1.9790789e+002  2.4888816e+002  1.3206579e+002  1.8310526e+002  2.3414474e+002  1.1720395e+002  1.6830263e+002  2.1940132e+002  1.2839474e+002  1.7931579e+002  2.3023684e+002  1.3952632e+002  1.9044737e+002  2.4136842e+002  1.5065789e+002  2.0157895e+002  2.5250000e+002  6.2375000e+001  4.7276316e+001  3.2177632e+001  7.3565789e+001  5.8526316e+001  4.3486842e+001  8.4756578e+001  6.9776316e+001  5.4796053e+001";

char x7[]="3.1396774e+002  2.0416129e+002  1.6451613e+001  1.2000000e+001  2.0193548e+002  3.1100000e+002  1.2403226e+002  2.3161290e+002  2.5906452e+002  2.8651613e+002  6.3379032e+001  1.1030645e+002  1.5723387e+002  1.3112903e+001  1.4225806e+001  1.5338710e+001  1.5445161e+002  1.0696774e+002  5.9483870e+001  2.8373387e+002  2.5646774e+002  2.2920161e+002  1.7077419e+002  2.1751613e+002  2.6425806e+002  3.1174194e+002  3.1248387e+002  3.1322580e+002  2.0249193e+002  2.0304839e+002  2.0360484e+002  9.6024195e+001  6.8016130e+001  4.0008065e+001  2.2980443e+002  2.3040726e+002  2.3101008e+002  2.5711693e+002  2.5776613e+002  2.5841532e+002  2.8442943e+002  2.8512500e+002  2.8582056e+002  6.0457661e+001  6.1431451e+001  6.2405242e+001  1.0780242e+002  1.0863710e+002  1.0947177e+002  1.5514718e+002  1.5584274e+002  1.5653831e+002  8.7306451e+001  1.1512903e+002  1.4295161e+002  1.3460484e+002  1.6224194e+002  1.8987903e+002  1.8190322e+002  2.0935484e+002  2.3680645e+002";
char y7[]="2.5013596e+002  3.1843713e+002  2.8188158e+002  7.7940058e+001  1.1257164e+002  4.7156433e+001  7.7149123e+000  3.0136184e+002  2.8428655e+002  2.6721125e+002  2.9102047e+002  3.0015936e+002  3.0929824e+002  1.2892544e+002  1.7991082e+002  2.3089620e+002  1.0391374e+002  9.5255849e+001  8.6597953e+001  6.3510235e+001  7.9864036e+001  9.6217838e+001  1.7575292e+001  2.7435673e+001  3.7296053e+001  9.7901315e+001  1.4864620e+002  1.9939108e+002  1.6403801e+002  2.1550439e+002  2.6697076e+002  2.5271199e+001  4.2827485e+001  6.0383772e+001  1.4750384e+002  1.9878984e+002  2.5007584e+002  1.3096966e+002  1.8207529e+002  2.3318092e+002  1.1443549e+002  1.6536074e+002  2.1628600e+002  1.3770358e+002  1.8880921e+002  2.3991484e+002  1.4648173e+002  1.9770760e+002  2.4893348e+002  1.5525987e+002  2.0660599e+002  2.5795212e+002  6.9342288e+001  5.2086623e+001  3.4830958e+001  7.8300805e+001  6.1345761e+001  4.4390717e+001  8.7259322e+001  7.0604899e+001  5.3950476e+001";

char x8[]="2.9574424e+002  2.1869355e+002  1.5559908e+001  1.2057604e+001  2.1589171e+002  2.9294240e+002  8.9808756e+001  2.3795622e+002  2.5721889e+002  2.7648157e+002  6.6343318e+001  1.1712673e+002  1.6791014e+002  1.2933180e+001  1.3808756e+001  1.4684332e+001  1.6493318e+002  1.1397466e+002  6.3016130e+001  2.7367973e+002  2.5441706e+002  2.3515438e+002  1.4059217e+002  1.9137558e+002  2.4215899e+002  2.9364286e+002  2.9434332e+002  2.9504378e+002  2.1659217e+002  2.1729263e+002  2.1799309e+002  7.0370968e+001  5.0933180e+001  3.1495392e+001  2.3585484e+002  2.3655530e+002  2.3725576e+002  2.5511752e+002  2.5581797e+002  2.5651843e+002  2.7438019e+002  2.7508065e+002  2.7578111e+002  6.3847927e+001  6.4679724e+001  6.5511521e+001  1.1476268e+002  1.1555069e+002  1.1633871e+002  1.6567742e+002  1.6642166e+002  1.6716590e+002  8.2410140e+001  1.0180415e+002  1.2119816e+002  1.3332489e+002  1.5267512e+002  1.7202535e+002  1.8423963e+002  2.0354609e+002  2.2285254e+002";
char y8[]="2.3330117e+002  3.0174561e+002  2.7833041e+002  7.4798246e+001  9.9114035e+001  2.7067251e+001  3.6520468e+000  2.8463450e+002  2.6752339e+002  2.5041228e+002  2.8418421e+002  2.9003801e+002  2.9589181e+002  1.2568129e+002  1.7656433e+002  2.2744737e+002  9.3035088e+001  8.6956141e+001  8.0877193e+001  4.5078947e+001  6.3090643e+001  8.1102339e+001  9.5058478e+000  1.5359649e+001  2.1213450e+001  7.8625731e+001  1.3018421e+002  1.8174269e+002  1.4977193e+002  2.0042982e+002  2.5108772e+002  2.1438597e+001  3.9225146e+001  5.7011696e+001  1.3198538e+002  1.8286842e+002  2.3375146e+002  1.1419883e+002  1.6530702e+002  2.1641520e+002  9.6412280e+001  1.4774561e+002  1.9907895e+002  1.3170395e+002  1.8253070e+002  2.3335746e+002  1.3772661e+002  1.8849708e+002  2.3926754e+002  1.4374927e+002  1.9446345e+002  2.4517763e+002  6.3034357e+001  4.5191521e+001  2.7348684e+001  6.9057018e+001  5.1157895e+001  3.3258772e+001  7.5079678e+001  5.7124269e+001  3.9168859e+001";

char x9[]="2.7632028e+002  2.2527880e+002  1.3260369e+001  9.3341014e+000  2.2200691e+002  2.7370276e+002  6.2338710e+001  2.3803917e+002  2.5079954e+002  2.6355991e+002  6.6264977e+001  1.1926958e+002  1.7227419e+002  1.0315668e+001  1.1297235e+001  1.2278802e+001  1.6883871e+002  1.1567051e+002  6.2502304e+001  2.6077880e+002  2.4785484e+002  2.3493087e+002  1.1517972e+002  1.6802074e+002  2.2086175e+002  2.7435714e+002  2.7501152e+002  2.7566590e+002  2.2282488e+002  2.2364286e+002  2.2446083e+002  4.9087558e+001  3.5836406e+001  2.2585254e+001  2.3570795e+002  2.3648502e+002  2.3726210e+002  2.4859101e+002  2.4932719e+002  2.5006336e+002  2.6147408e+002  2.6216935e+002  2.6286463e+002  6.3442972e+001  6.4383640e+001  6.5324308e+001  1.1657028e+002  1.1747005e+002  1.1836981e+002  1.6969758e+002  1.7055645e+002  1.7141532e+002  7.5671658e+001  8.8841013e+001  1.0201037e+002  1.2875806e+002  1.4184562e+002  1.5493318e+002  1.8184447e+002  1.9485023e+002  2.0785599e+002";
char y9[]="2.2850000e+002  2.9872222e+002  2.8716667e+002  7.9166667e+001  9.2500000e+001  2.3166667e+001  7.1666667e+000  2.8116666e+002  2.6361111e+002  2.4605556e+002  2.9005556e+002  2.9294444e+002  2.9583333e+002  1.3116667e+002  1.8316667e+002  2.3516667e+002  8.9166667e+001  8.5833334e+001  8.2500000e+001  4.0500000e+001  5.7833334e+001  7.5166667e+001  1.1166667e+001  1.5166667e+001  1.9166667e+001  7.4500000e+001  1.2583333e+002  1.7716667e+002  1.4405556e+002  1.9561111e+002  2.4716666e+002  2.5166667e+001  4.3166667e+001  6.1166667e+001  1.2666667e+002  1.7816667e+002  2.2966667e+002  1.0927778e+002  1.6072222e+002  2.1216667e+002  9.1888889e+001  1.4327778e+002  1.9466667e+002  1.3438889e+002  1.8627778e+002  2.3816667e+002  1.3761111e+002  1.8938889e+002  2.4116667e+002  1.4083333e+002  1.9250000e+002  2.4416667e+002  6.4666667e+001  4.6833334e+001  2.9000000e+001  6.8166667e+001  5.0500000e+001  3.2833334e+001  7.1666667e+001  5.4166667e+001  3.6666667e+001";

char x10[]="2.7207488e+002  2.1910023e+002  7.8398618e+000  4.6486175e+000  2.1654724e+002  2.7016014e+002  5.6985023e+001  2.3234389e+002  2.4558756e+002  2.5883122e+002  6.0654954e+001  1.1347005e+002  1.6628514e+002  5.4464286e+000  6.2442397e+000  7.0420507e+000  1.6357258e+002  1.1059793e+002  5.7623273e+001  2.5675692e+002  2.4335369e+002  2.2995047e+002  1.1027880e+002  1.6357258e+002  2.1686636e+002  2.7063883e+002  2.7111751e+002  2.7159620e+002  2.1718549e+002  2.1782374e+002  2.1846198e+002  4.3900922e+001  3.0816820e+001  1.7732719e+001  2.3054882e+002  2.3114718e+002  2.3174554e+002  2.4391216e+002  2.4447062e+002  2.4502909e+002  2.5727549e+002  2.5779407e+002  2.5831264e+002  5.8381193e+001  5.9139113e+001  5.9897034e+001  1.1131596e+002  1.1203399e+002  1.1275202e+002  1.6425072e+002  1.6492886e+002  1.6560700e+002  7.0787155e+001  8.3951038e+001  9.7114920e+001  1.2384159e+002  1.3708526e+002  1.5032892e+002  1.7689603e+002  1.9021947e+002  2.0354292e+002";
char y10[]="2.2429386e+002  3.1837281e+002  2.9841667e+002  1.0170614e+002  1.2356287e+002  2.8533626e+001  6.6769006e+000  2.9485307e+002  2.7133334e+002  2.4781360e+002  3.0340571e+002  3.0839474e+002  3.1338378e+002  1.5088377e+002  2.0006141e+002  2.4923904e+002  1.1809869e+002  1.1263451e+002  1.0717032e+002  5.2290937e+001  7.6048248e+001  9.9805559e+001  1.2141082e+001  1.7605263e+001  2.3069445e+001  7.7473685e+001  1.2641374e+002  1.7535380e+002  1.7226536e+002  2.2096784e+002  2.6967032e+002  3.0434210e+001  5.4191520e+001  7.7948830e+001  1.4856744e+002  1.9732932e+002  2.4609119e+002  1.2486952e+002  1.7369079e+002  2.2251206e+002  1.0117160e+002  1.5005227e+002  1.9893293e+002  1.5622917e+002  2.0528801e+002  2.5434686e+002  1.6157456e+002  2.1051462e+002  2.5945468e+002  1.6691996e+002  2.1574123e+002  2.6456250e+002  8.3413012e+001  5.9655702e+001  3.5898392e+001  8.8877195e+001  6.5119884e+001  4.1362574e+001  9.4341377e+001  7.0584066e+001  4.6826755e+001";

char x11[]="2.6888364e+002  2.2867396e+002  1.3584101e+001  1.1031106e+001  2.2675922e+002  2.6696889e+002  5.0602535e+001  2.3872638e+002  2.4877880e+002  2.5883122e+002  6.7356566e+001  1.2112903e+002  1.7490150e+002  1.1669355e+001  1.2307603e+001  1.2945852e+001  1.7282719e+002  1.1889516e+002  6.4963134e+001  2.5691647e+002  2.4686406e+002  2.3681164e+002  1.0469412e+002  1.5878571e+002  2.1287730e+002  2.6744758e+002  2.6792627e+002  2.6840495e+002  2.2723790e+002  2.2771659e+002  2.2819528e+002  4.0709678e+001  3.0816821e+001  2.0923963e+001  2.3729032e+002  2.3776901e+002  2.3824769e+002  2.4734274e+002  2.4782143e+002  2.4830011e+002  2.5739516e+002  2.5787385e+002  2.5835253e+002  6.5561492e+001  6.6159850e+001  6.6758208e+001  1.1945363e+002  1.2001210e+002  1.2057056e+002  1.7334577e+002  1.7386434e+002  1.7438292e+002  7.4895882e+001  8.4828629e+001  9.4761376e+001  1.2886780e+002  1.3884044e+002  1.4881308e+002  1.8283972e+002  1.9285225e+002  2.0286477e+002";
char y11[]="2.0877485e+002  3.2608480e+002  3.0819006e+002  1.2427193e+002  1.4514912e+002  2.5850877e+001  5.9678363e+000  2.9675731e+002  2.6742982e+002  2.3810234e+002  3.1266375e+002  3.1713743e+002  3.2161111e+002  1.7025146e+002  2.1623100e+002  2.6221053e+002  1.3992982e+002  1.3471053e+002  1.2949123e+002  5.5675438e+001  8.5499999e+001  1.1532456e+002  1.0938596e+001  1.5909357e+001  2.0880117e+001  7.1581870e+001  1.1731286e+002  1.6304386e+002  1.9038304e+002  2.3561696e+002  2.8085088e+002  3.5543860e+001  6.5119883e+001  9.4695907e+001  1.6068275e+002  2.0604094e+002  2.5139912e+002  1.3098246e+002  1.7646491e+002  2.2194737e+002  1.0128216e+002  1.4688889e+002  1.9249561e+002  1.7528436e+002  2.2107749e+002  2.6687062e+002  1.8031725e+002  2.2592398e+002  2.7153070e+002  1.8535015e+002  2.3077047e+002  2.7619079e+002  9.9853070e+001  7.0214912e+001  4.0576754e+001  1.0501023e+002  7.5309941e+001  4.5609649e+001  1.1016740e+002  8.0404970e+001  5.0642543e+001";

char x12[]="2.8836290e+002  2.2039055e+002  1.4434332e+001  1.1035714e+001  2.1835138e+002  2.8700346e+002  8.0367512e+001  2.3738364e+002  2.5437673e+002  2.7136981e+002  6.5923386e+001  1.1741244e+002  1.6890150e+002  1.1885369e+001  1.2735023e+001  1.3584678e+001  1.6652246e+002  1.1469355e+002  6.2864631e+001  2.6984044e+002  2.5267742e+002  2.3551440e+002  1.3202650e+002  1.8368549e+002  2.3534447e+002  2.8734332e+002  2.8768318e+002  2.8802304e+002  2.1886117e+002  2.1937097e+002  2.1988076e+002  6.3034563e+001  4.5701613e+001  2.8368664e+001  2.3598171e+002  2.3644902e+002  2.3691633e+002  2.5310225e+002  2.5352707e+002  2.5395190e+002  2.7022278e+002  2.7060513e+002  2.7098747e+002  6.3629320e+001  6.4394008e+001  6.5158697e+001  1.1537327e+002  1.1605299e+002  1.1673272e+002  1.6711722e+002  1.6771198e+002  1.6830674e+002  8.0155098e+001  9.7445565e+001  1.1473603e+002  1.3194153e+002  1.4918952e+002  1.6643750e+002  1.8372797e+002  2.0093347e+002  2.1813897e+002";
char y12[]="2.1710088e+002  3.4653947e+002  3.0791667e+002  1.3672368e+002  1.7952193e+002  4.6951754e+001  6.2412281e+000  3.1417982e+002  2.8182018e+002  2.4946053e+002  3.1757237e+002  3.2722807e+002  3.3688377e+002  1.7952193e+002  2.2232018e+002  2.6511842e+002  1.6882237e+002  1.5812281e+002  1.4742324e+002  8.0094298e+001  1.1323684e+002  1.4637939e+002  1.6418860e+001  2.6596491e+001  3.6774123e+001  8.9489036e+001  1.3202632e+002  1.7456360e+002  2.2127632e+002  2.6303070e+002  3.0478508e+002  3.8861841e+001  7.1482454e+001  1.0410307e+002  1.8832950e+002  2.3027960e+002  2.7222971e+002  1.5538268e+002  1.9752851e+002  2.3967434e+002  1.2243586e+002  1.6477741e+002  2.0711897e+002  1.8996052e+002  2.3249781e+002  2.7503509e+002  2.0039912e+002  2.4267544e+002  2.8495175e+002  2.1083772e+002  2.5285307e+002  2.9486842e+002  1.1467215e+002  8.1921051e+001  4.9169955e+001  1.2524123e+002  9.2359648e+001  5.9478070e+001  1.3581031e+002  1.0279825e+002  6.9786184e+001";

char x13[]="2.9854608e+002  2.0468433e+002  8.5552995e+000  5.7534562e+000  2.0258295e+002  2.9714516e+002  1.0031567e+002  2.2814977e+002  2.5161521e+002  2.7508064e+002  5.7587557e+001  1.0661981e+002  1.5565207e+002  6.4539170e+000  7.1543778e+000  7.8548387e+000  1.5337558e+002  1.0416820e+002  5.4960830e+001  2.7350461e+002  2.4986406e+002  2.2622350e+002  1.4952304e+002  1.9873041e+002  2.4793779e+002  2.9749539e+002  2.9784562e+002  2.9819585e+002  2.0310830e+002  2.0363364e+002  2.0415898e+002  7.6675117e+001  5.3034563e+001  2.9394010e+001  2.2670507e+002  2.2718664e+002  2.2766820e+002  2.5030184e+002  2.5073963e+002  2.5117742e+002  2.7389862e+002  2.7429262e+002  2.7468663e+002  5.5617512e+001  5.6274193e+001  5.6930875e+001  1.0478111e+002  1.0539401e+002  1.0600691e+002  1.5394470e+002  1.5451382e+002  1.5508295e+002  7.8601383e+001  1.0224194e+002  1.2588249e+002  1.2780876e+002  1.5144931e+002  1.7508986e+002  1.7701613e+002  2.0065668e+002  2.2429723e+002";
char y13[]="2.1543567e+002  3.6605556e+002  2.9569298e+002  1.5826608e+002  2.2862865e+002  7.8008772e+001  6.5467836e+000  3.2840059e+002  2.9074561e+002  2.5309064e+002  3.1328362e+002  3.3087427e+002  3.4846492e+002  1.9262280e+002  2.2697953e+002  2.6133625e+002  2.1103801e+002  1.9344736e+002  1.7585672e+002  1.1566374e+002  1.5331871e+002  1.9097368e+002  2.4412281e+001  4.2277778e+001  6.0143275e+001  1.1236550e+002  1.4672222e+002  1.8107895e+002  2.6298538e+002  2.9734211e+002  3.3169883e+002  4.4476608e+001  8.2406432e+001  1.2033626e+002  2.2533041e+002  2.5968713e+002  2.9404386e+002  1.8767544e+002  2.2203216e+002  2.5638889e+002  1.5002047e+002  1.8437719e+002  2.1873392e+002  2.1021345e+002  2.4457017e+002  2.7892690e+002  2.2780409e+002  2.6216082e+002  2.9651754e+002  2.4539473e+002  2.7975146e+002  3.1410819e+002  1.3799561e+002  1.0013450e+002  6.2273391e+001  1.5565497e+002  1.1786257e+002  8.0070175e+001  1.7331432e+002  1.3559064e+002  9.7866958e+001";

char x14[]="3.1666129e+002  1.8974885e+002  1.4311060e+001  1.0578341e+001  1.8601613e+002  3.1591475e+002  1.3898387e+002  2.2147696e+002  2.5320507e+002  2.8493318e+002  5.8170507e+001  1.0202996e+002  1.4588940e+002  1.1511521e+001  1.2444701e+001  1.3377880e+001  1.4215668e+002  9.8297235e+001  5.4437788e+001  2.8344010e+002  2.5096544e+002  2.1849079e+002  1.8321659e+002  2.2744931e+002  2.7168203e+002  3.1610139e+002  3.1628802e+002  3.1647465e+002  1.8694931e+002  1.8788249e+002  1.8881567e+002  1.0688249e+002  7.4781105e+001  4.2679723e+001  2.1923733e+002  2.1998387e+002  2.2073042e+002  2.5152535e+002  2.5208526e+002  2.5264516e+002  2.8381337e+002  2.8418664e+002  2.8455991e+002  5.5370968e+001  5.6304148e+001  5.7237328e+001  9.9230415e+001  1.0016360e+002  1.0109678e+002  1.4308986e+002  1.4402304e+002  1.4495622e+002  8.6632489e+001  1.1882719e+002  1.5102189e+002  1.3058525e+002  1.6287327e+002  1.9516129e+002  1.7453802e+002  2.0691936e+002  2.3930069e+002";
char y14[]="2.3664474e+002  3.8373246e+002  2.7341667e+002  1.5735526e+002  2.6307456e+002  1.1713596e+002  1.0267544e+001  3.4696053e+002  3.1018860e+002  2.7341667e+002  3.0099562e+002  3.2857457e+002  3.5615351e+002  1.8637061e+002  2.1538597e+002  2.4440132e+002  2.3664474e+002  2.1021491e+002  1.8378508e+002  1.5362061e+002  1.9010526e+002  2.2658991e+002  3.6984648e+001  6.3701752e+001  9.0418856e+001  1.4701315e+002  1.7689035e+002  2.0676755e+002  2.9323904e+002  3.2340351e+002  3.5356799e+002  4.7039473e+001  8.3811402e+001  1.2058333e+002  2.5668257e+002  2.8677522e+002  3.1686787e+002  2.2012610e+002  2.5014693e+002  2.8016777e+002  1.8356963e+002  2.1351864e+002  2.4346765e+002  2.1308772e+002  2.4239035e+002  2.7169298e+002  2.3980482e+002  2.6939474e+002  2.9898465e+002  2.6652193e+002  2.9639912e+002  3.2627632e+002  1.4708498e+002  1.1038487e+002  7.3684757e+001  1.7358662e+002  1.3695833e+002  1.0033004e+002  2.0008827e+002  1.6353180e+002  1.2697533e+002";

char x15[]="3.1911290e+002  1.6152765e+002  1.0827189e+001  7.7672811e+000  1.5770276e+002  3.1605300e+002  1.6611751e+002  2.0092396e+002  2.4032028e+002  2.7971659e+002  4.8502304e+001  8.6177419e+001  1.2385253e+002  8.5322581e+000  9.2972351e+000  1.0062212e+001  1.2021889e+002  8.2735021e+001  4.5251151e+001  2.7646544e+002  2.3687788e+002  1.9729032e+002  2.0360138e+002  2.4108526e+002  2.7856913e+002  3.1681797e+002  3.1758295e+002  3.1834793e+002  1.5865898e+002  1.5961521e+002  1.6057143e+002  1.2652995e+002  8.6942396e+001  4.7354838e+001  1.9819873e+002  1.9910714e+002  2.0001555e+002  2.3773848e+002  2.3859908e+002  2.3945968e+002  2.7727823e+002  2.7809101e+002  2.7890380e+002  4.6063939e+001  4.6876728e+001  4.7689516e+001  8.3595620e+001  8.4456220e+001  8.5316820e+001  1.2112730e+002  1.2203571e+002  1.2294412e+002  8.4838709e+001  1.2442627e+002  1.6401382e+002  1.2232258e+002  1.6191014e+002  2.0149770e+002  1.5980645e+002  1.9939401e+002  2.3898157e+002";
char y15[]="2.4771053e+002  3.8086842e+002  2.4423684e+002  1.4002632e+002  2.7781579e+002  1.4581579e+002  5.7105263e+000  3.4757895e+002  3.1428948e+002  2.8100000e+002  2.7839473e+002  3.1255263e+002  3.4671053e+002  1.6607895e+002  1.9213158e+002  2.1818421e+002  2.4336842e+002  2.0892106e+002  1.7447369e+002  1.7881579e+002  2.1181579e+002  2.4481579e+002  4.0736842e+001  7.5763158e+001  1.1078947e+002  1.7128947e+002  1.9676316e+002  2.2223684e+002  3.0357895e+002  3.2934211e+002  3.5510526e+002  3.9289475e+001  7.2868423e+001  1.0644737e+002  2.7050658e+002  2.9619737e+002  3.2188816e+002  2.3743421e+002  2.6305263e+002  2.8867105e+002  2.0436184e+002  2.2990790e+002  2.5545395e+002  2.0045395e+002  2.2643421e+002  2.5241447e+002  2.3482895e+002  2.6073684e+002  2.8664474e+002  2.6920395e+002  2.9503947e+002  3.2087500e+002  1.4103948e+002  1.0760526e+002  7.4171054e+001  1.7563158e+002  1.4234211e+002  1.0905263e+002  2.1022369e+002  1.7707895e+002  1.4393421e+002";

char x16[]="3.0325922e+002  1.0834677e+002  1.1607143e+001  8.7407834e+000  1.0619700e+002  3.0182604e+002  2.0293664e+002  1.5707488e+002  2.0580300e+002  2.5453111e+002  3.5792050e+001  5.9976957e+001  8.4161863e+001  9.4573733e+000  1.0173963e+001  1.0890553e+001  8.1832946e+001  5.7468892e+001  3.3104838e+001  2.5291878e+002  2.0401152e+002  1.5510426e+002  2.2765899e+002  2.5238134e+002  2.7710369e+002  3.0218434e+002  3.0254263e+002  3.0290093e+002  1.0673444e+002  1.0727189e+002  1.0780933e+002  1.5438768e+002  1.0583871e+002  5.7289748e+001  1.5559692e+002  1.5608957e+002  1.5658223e+002  2.0445939e+002  2.0490726e+002  2.0535513e+002  2.5332186e+002  2.5372494e+002  2.5412803e+002  3.3776641e+001  3.4448444e+001  3.5120247e+001  5.8095908e+001  5.8722924e+001  5.9349940e+001  8.2415175e+001  8.2997405e+001  8.3579634e+001  8.1743376e+001  1.3038191e+002  1.7902045e+002  1.0619700e+002  1.5492512e+002  2.0365323e+002  1.3065063e+002  1.7946832e+002  2.2828600e+002";
char y16[]="2.8435234e+002  3.7033480e+002  2.0057456e+002  9.5852339e+001  2.6561257e+002  1.7963012e+002  7.6652047e+000  3.4883918e+002  3.2734357e+002  3.0584796e+002  2.4301462e+002  2.8545468e+002  3.2789474e+002  1.2203289e+002  1.4821345e+002  1.7439400e+002  2.2317251e+002  1.8073245e+002  1.3829240e+002  2.0112573e+002  2.2262135e+002  2.4411696e+002  5.0656434e+001  9.3647662e+001  1.3663889e+002  2.0581068e+002  2.3199123e+002  2.5817179e+002  2.9179313e+002  3.1797368e+002  3.4415424e+002  2.9711988e+001  5.1758772e+001  7.3805555e+001  2.7029751e+002  2.9647807e+002  3.2265863e+002  2.4880190e+002  2.7498246e+002  3.0116301e+002  2.2730629e+002  2.5348684e+002  2.7966740e+002  1.6447295e+002  1.9065351e+002  2.1683406e+002  2.0691301e+002  2.3309357e+002  2.5927412e+002  2.4935307e+002  2.7553363e+002  3.0171418e+002  1.1638341e+002  9.4474415e+001  7.2565424e+001  1.5896126e+002  1.3719006e+002  1.1541886e+002  2.0153911e+002  1.7990570e+002  1.5827230e+002";

char x17[]="2.8020507e+002  7.0509217e+001  6.8041475e+000  4.8133641e+000  6.9845622e+001  2.7688710e+002  2.1251843e+002  1.2293318e+002  1.7535714e+002  2.2778111e+002  2.2730415e+001  3.8656682e+001  5.4582950e+001  5.3110599e+000  5.8087558e+000  6.3064517e+000  5.3587558e+001  3.7329493e+001  2.1071429e+001  2.2512673e+002  1.7336636e+002  1.2160599e+002  2.2861060e+002  2.4470277e+002  2.6079493e+002  2.7771659e+002  2.7854608e+002  2.7937558e+002  7.0011521e+001  7.0177420e+001  7.0343318e+001  1.6059216e+002  1.0866590e+002  5.6739631e+001  1.2193779e+002  1.2226959e+002  1.2260138e+002  1.7386406e+002  1.7436175e+002  1.7485945e+002  2.2579032e+002  2.2645392e+002  2.2711751e+002  2.1486175e+001  2.1900922e+001  2.2315668e+001  3.7661290e+001  3.7993088e+001  3.8324885e+001  5.3836406e+001  5.4085254e+001  5.4334102e+001  7.2956221e+001  1.2484101e+002  1.7672581e+002  8.9172811e+001  1.4101613e+002  1.9285945e+002  1.0538940e+002  1.5719125e+002  2.0899309e+002";
char y17[]="3.0287135e+002  3.5645614e+002  1.8367251e+002  6.5567251e+001  2.4053801e+002  1.8585965e+002  1.0888889e+001  3.4305994e+002  3.2966375e+002  3.1626755e+002  2.2686842e+002  2.7006433e+002  3.1326023e+002  9.5093566e+001  1.2461988e+002  1.5414620e+002  1.9679532e+002  1.5305263e+002  1.0930994e+002  1.9952924e+002  2.1319883e+002  2.2686842e+002  5.4631579e+001  9.8374269e+001  1.4211696e+002  2.1511257e+002  2.4436550e+002  2.7361843e+002  2.6951754e+002  2.9849708e+002  3.2747661e+002  2.4558480e+001  3.8228070e+001  5.1897661e+001  2.5591630e+002  2.8496418e+002  3.1401206e+002  2.4231506e+002  2.7143129e+002  3.0054752e+002  2.2871382e+002  2.5789839e+002  2.8708297e+002  1.3869956e+002  1.6808918e+002  1.9747880e+002  1.8230555e+002  2.1155848e+002  2.4081140e+002  2.2591155e+002  2.5502778e+002  2.8414400e+002  9.5640350e+001  8.1970760e+001  6.8301170e+001  1.3938304e+002  1.2571345e+002  1.1204386e+002  1.8312573e+002  1.6945614e+002  1.5578655e+002";


struct holdR
{
	float x;
	float y;
	float z;
};

struct feature
{
	float x;
	float y;
	int featnum;
};

void parsex(char x[],std::vector<double>& xa)
{
	char *pch;
	double test;
	pch = strtok(x," ");
	while (pch != NULL)
		{
			test = atof(pch); 
			xa.push_back(test);
			pch = strtok (NULL,"  ");
		}
}

void parsey(char y[],std::vector<double>& ya)
{
	char *pch;
	double test;
	pch = strtok(y," ");
	while (pch != NULL)
		{
			test = atof(pch); 
			ya.push_back(test);
			pch = strtok (NULL,"  ");
		}
}

void CreateVect(std::vector<CPoint>& im, std::vector<double> x,std::vector<double> y)
{
	for(int i=0; i<61;i++)
	{
		im[i].x=x[i];
		im[i].y=y[i];
	}
}

MatDbl FindCmat(MatDbl Rcap)
{
	MatDbl C(1,6);
	MatDbl temp(6,3*(Rcap.Height()/2)),op(1,3*(Rcap.Height()/2));

	std::vector<holdR> i(Rcap.Height()/2);
	std::vector<holdR> j(Rcap.Height()/2);

	for(int p=0;p<(Rcap.Height()/2);p++)
	{
		   i[p].x = Rcap(0,p);
		   i[p].y = Rcap(1,p);
		   i[p].z = Rcap(2,p);
	}

	for(int p=(Rcap.Height()/2);p<Rcap.Height();p++)
	{
		j[p-(Rcap.Height()/2)].x = Rcap(0,p);
		j[p-(Rcap.Height()/2)].y = Rcap(1,p);
		j[p-(Rcap.Height()/2)].z = Rcap(2,p);
	}
	
	float ix,iy,iz,jx,jy,jz;
	
	for(int x=0; x<(Rcap.Height()/2);x++)
	{
		ix=i[x].x;iy=i[x].y;iz=i[x].z;
		jx=j[x].x;jy=j[x].y;jz=j[x].z;
	}

	int count=0;
	for(int y=0;y<temp.Height();y++)
	{
		temp(0,y)= pow(i[count].x,2);temp(1,y)=pow(i[count].y,2);temp(2,y)=pow(i[count].z,2);
		temp(3,y)= 2*i[count].x*i[count].y; temp(4,y)= 2*i[count].x*i[count].z; temp(5,y)= 2*i[count].y*i[count].z;

		temp(0,y+1)= pow(j[count].x,2);temp(1,y+1)=pow(j[count].y,2);temp(2,y+1)=pow(j[count].z,2);
		temp(3,y+1)= 2*j[count].x*j[count].y; temp(4,y+1)= 2*j[count].x*j[count].z; temp(5,y+1)= 2*j[count].y*j[count].z;

		temp(0,y+2)= i[count].x*j[count].x ;temp(1,y+2)= i[count].y*j[count].y ;temp(2,y+2)=i[count].z*j[count].z;
		temp(3,y+2)= i[count].x*j[count].y + i[count].y*j[count].x; temp(4,y+2)= i[count].x*j[count].z + i[count].z*j[count].x ; temp(5,y+2)= i[count].y*j[count].z + i[count].z*j[count].y ;
		
		op(0,y)=1;op(0,y+1)=1;op(0,y+2)=0;
		y=y+2;
		count++;
	}

	SolveLinear(temp,op,&C);
	return C;
}
  

int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	int nRetCode = 0;

	HMODULE hModule = ::GetModuleHandle(NULL);

	if (hModule != NULL)
	{
		// initialize MFC and print and error on failure
		if (!AfxWinInit(hModule, NULL, ::GetCommandLine(), 0))
		{
			// TODO: change error code to suit your needs
			_tprintf(_T("Fatal Error: MFC initialization failed\n"));
			nRetCode = 1;
		}
		else
		{
			ImgBgr cubeseq[17];
			char path[50],path2[50];
			CString cube,cube1,cube2;
			cout<<"enter the path to the folder containing the cube images"<<endl;
			gets(path);
			cube1="cube00%d.jpg";
			cube2="cube0%d.jpg";
			cube1=path+cube1;
			cube2=path+cube2;
			CString chalk1,chalk;
			ImgBgr chalkseq[210];
			ImgGray chal[209];
			cout<<"enter the path to the chalk sequence"<<endl;
			gets(path2);
			chalk1="img2%d.jpg";
			chalk1=path2+chalk1;
			for(int i=1; i<10; i++)
			{
				cube.Format(cube1,i);
				Load(cube,&cubeseq[i-1]);				
			}

			for(int i=10; i<18;i++)
			{
				cube.Format(cube2,i);
				Load(cube,&cubeseq[i-1]);				
			}

			
			std::vector<double> xa1;std::vector<double> xa2;std::vector<double> xa3;std::vector<double> xa4;std::vector<double> xa5;std::vector<double> xa6;std::vector<double> xa7;std::vector<double> xa8;std::vector<double> xa9;std::vector<double> xa10;std::vector<double> xa11;std::vector<double> xa12;std::vector<double> xa13;std::vector<double> xa14;std::vector<double> xa15;std::vector<double> xa16;std::vector<double> xa17;
			std::vector<double> ya1;std::vector<double> ya2;std::vector<double> ya3;std::vector<double> ya4;std::vector<double> ya5;std::vector<double> ya6;std::vector<double> ya7;std::vector<double> ya8;std::vector<double> ya9;std::vector<double> ya10;std::vector<double> ya11;std::vector<double> ya12;std::vector<double> ya13;std::vector<double> ya14;std::vector<double> ya15;std::vector<double> ya16;std::vector<double> ya17;
			parsex(x111,xa1);parsex(x2,xa2);parsex(x3,xa3);parsex(x4,xa4);parsex(x5,xa5);parsex(x6,xa6);parsex(x7,xa7);parsex(x8,xa8);parsex(x9,xa9);parsex(x10,xa10);parsex(x11,xa11);parsex(x12,xa12);parsex(x13,xa13);parsex(x14,xa14);parsex(x15,xa15);parsex(x16,xa16);parsex(x17,xa17);
			parsey(y111,ya1);parsey(y2,ya2);parsey(y3,ya3);parsey(y4,ya4);parsey(y5,ya5);parsey(y6,ya6);parsey(y7,ya7);parsey(y8,ya8);parsey(y9,ya9);parsey(y10,ya10);parsey(y11,ya11);parsey(y12,ya12);parsey(y13,ya13);parsey(y14,ya14);parsey(y15,ya15);parsey(y16,ya16);parsey(y17,ya17);

			CreateVect(image1,xa1,ya1);CreateVect(image2,xa2,ya2);CreateVect(image3,xa3,ya3);CreateVect(image4,xa4,ya4);CreateVect(image5,xa5,ya5);CreateVect(image6,xa6,ya6);CreateVect(image7,xa7,ya7);CreateVect(image8,xa8,ya8);CreateVect(image9,xa9,ya9);CreateVect(image10,xa10,ya10);CreateVect(image11,xa11,ya11);CreateVect(image12,xa12,ya12);CreateVect(image13,xa13,ya13);CreateVect(image14,xa14,ya14);CreateVect(image15,xa15,ya15);CreateVect(image16,xa16,ya16);CreateVect(image17,xa17,ya17);
			std::vector<std::vector<CPoint>> featpointarr;
			featpointarr.push_back(image1);featpointarr.push_back(image2);featpointarr.push_back(image3);featpointarr.push_back(image4);featpointarr.push_back(image5);featpointarr.push_back(image6);featpointarr.push_back(image7);featpointarr.push_back(image8);featpointarr.push_back(image9);featpointarr.push_back(image10);featpointarr.push_back(image11);featpointarr.push_back(image12);featpointarr.push_back(image13);featpointarr.push_back(image14);featpointarr.push_back(image15);featpointarr.push_back(image16);featpointarr.push_back(image17);
			MatDbl W(61,34),Wcap(61,34);
			MatDbl U,sigma,V;
			
			for(int y=0; y<17;y++ )
				for(int x=0; x<61;x++)
				{
					W(x,y)=featpointarr[y][x].x;
				}
			
			for(int y=17; y<34;y++ )
				for(int x=0; x<61;x++)
				{
					W(x,y)=featpointarr[y-17][x].y;
					
				}
			
            std::vector<float> rowaverage;
			for(int y=0;y<W.Height();y++){
				int rowcount=0;
				for(int x=0;x<W.Width();x++)
				{
					rowcount +=W(x,y);
				}
				rowaverage.push_back((rowcount/W.Width()));
			}
			
			for(int y=0; y<Wcap.Height();y++){
			
				for(int x=0;x<Wcap.Width();x++)
				{
					Wcap(x,y)=W(x,y)-rowaverage[y];					
				}
			}

			Svd(Transpose(Wcap),&V,&sigma,&U);
			V=Transpose(V);
			MatDbl Rcap,Scap,Sigma1(3,3),U3(3,U.Height()),V3(V.Width(),3);
			MatDbl C;
			MatDbl Uq,Sq,Vq;
			Sigma1(0,0)=sigma(0,0);Sigma1(1,0)=0;Sigma1(2,0)=0;Sigma1(0,1)=0;Sigma1(1,1)=sigma(0,1);Sigma1(2,1)=0;Sigma1(0,2)=0;Sigma1(1,2)=0;Sigma1(2,2)=sigma(0,2);
			Sigma1(0,0) = sqrt(Sigma1(0,0));Sigma1(1,1)=sqrt(Sigma1(1,1));Sigma1(2,2)=sqrt(Sigma1(2,2));
			for(int y=0;y<U.Height();y++)
				for(int x=0;x<3;x++)
				{
					U3(x,y)=U(x,y);
				}
			
			for(int y=0;y<3;y++)
				for(int x=0;x<V.Width();x++)
				{
					V3(x,y)=V(x,y);
				}
			
			MatrixMultiply(U3,Sigma1,&Rcap);
			MatrixMultiply(Sigma1,(V3),&Scap);
			C=FindCmat(Rcap);
			MatDbl C1(3,3),Q,Sqnew(3,3);
			MatDbl Scene;
			C1(0,0)=C(0,0);C1(1,1)=C(0,1);C1(2,2)=C(0,2);
			C1(1,0)=C1(0,1)=C(0,3);
			C1(2,0)=C1(0,2)=C(0,4);
			C1(2,1)=C1(1,2)=C(0,5);
			Svd(C1,&Uq,&Sq,&Vq);
			Set(&Sqnew,0);
			Sqnew(0,0)=sqrt(Sq(0,0));
			Sqnew(1,1)=sqrt(Sq(0,1));
			Sqnew(2,2)=sqrt(Sq(0,2));
			MatrixMultiply(Uq,Sqnew,&Q);
			Q=Inverse(Q);
			MatrixMultiply(Q,Scap,&Scene);
			cout<<endl;
			
			
			
			ofstream meshfile;
			meshfile.open("cube.ply");
			meshfile<<"ply"<<endl<<"format ascii 1.0"<<endl<<"element vertex "<<61<<endl<<"property float x"<<endl<<"property float y"<<endl<<"property float z"<<endl<<"property uchar diffuse_red"<<endl<<"property uchar diffuse_green"<<endl<<"property uchar diffuse_blue"<<endl<<"end_header"<<endl<<endl;
			
				for(int x=0;x<Scene.Width();x++)
				{
					meshfile<<Scene(x,0)<<" "<<Scene(x,1)<<" "<<Scene(x,2)<<" "<<255<<" "<<0<<" "<<0<<" "<<endl;
				}
            
			meshfile.close();

			
			
			
			for(int i=166; i<375;i++)
			{
				chalk.Format(chalk1,i);
				Load(chalk,&chalkseq[i-166]);
				Convert(chalkseq[i-166],&chal[i-166]);
			}

			KLT_TrackingContext tc;
			KLT_FeatureList fl;
			KLT_FeatureTable ft;
			int nFeatures =100;

			tc = KLTCreateTrackingContext();
		    KLTPrintTrackingContext(tc);
			fl = KLTCreateFeatureList(nFeatures);
			ft = KLTCreateFeatureTable(208,100);
			tc->smoothBeforeSelecting=TRUE;
			KLTSelectGoodFeatures(tc,&chal[0](0,0),chal[0].Width(),chal[0].Height(),fl);
			ImgBgr sequence;
			Figure display;
			for(int i=0; i<208;i++)
			{
				{
					KLTTrackFeatures(tc,&chal[i](0,0),&chal[i+1](0,0),chal[i].Width(),chal[i].Height(),fl);
					KLTStoreFeatureList(fl, ft, i);
					KLTWriteFeatureListToPPM(fl, &chal[i](0,0), chal[i].Width(),chal[i].Height(), "feat1.ppm");
					Load("feat1.ppm",&sequence);
					display.Draw(sequence);
				}				
			}

			
			std::vector<int> featurevect;
			std::vector<feature> f(69);
			int num=0;
			for (int feat = 0 ; feat < ft->nFeatures ; feat++){
				int count=0;
				for (int frame = 0 ; frame < ft->nFrames ; frame++)  
				{
					
					if(ft->feature[feat][frame]->val == 0)
					{count++;}
					if(count == 208)
					{
						f[num].x = ft->feature[feat][frame]->x;
						f[num].y = ft->feature[feat][frame]->y;
						f[num].featnum=feat;
						num++;
						featurevect.push_back(feat);
					}
				}
			}

			
			MatDbl Wmat(69,2*208),Wmatcap(69,2*208);
			for(int i=0;i<f.size();i++)
				for(int frame=0;frame< ft->nFrames; frame++)
				{
					Wmat(i,frame) = ft->feature[f[i].featnum][frame]->x; 
				}

			for(int i=0;i<f.size();i++)
				for(int frame=ft->nFrames;frame<2*ft->nFrames;frame++)
				{
					Wmat(i,frame) = ft->feature[f[i].featnum][frame-ft->nFrames]->y;
				}

			std::vector<float> average;
			for(int y=0; y<Wmat.Height();y++){
				int row=0;
				for(int x=0;x<Wmat.Width();x++)
				{
					row+=Wmat(x,y);
				}
				average.push_back((row/Wmat.Width()));
			}

			for(int y=0; y<Wmatcap.Height();y++)
				for(int x=0;x<Wmatcap.Width();x++)
				{
					Wmatcap(x,y)=Wmat(x,y)-average[y];
				}

			MatDbl UU,SS,VV;
			Svd(Wmatcap,&UU,&SS,&VV);
			VV=Transpose(VV);
			MatDbl RR,SCSS,SS3(3,3),UU3(3,UU.Height()),VV3(VV.Width(),3),CC;
			SS3(0,0)=SS(0,0);SS3(1,0)=0;SS3(2,0)=0;SS3(0,1)=0;SS3(1,1)=SS(0,1);SS3(2,1)=0;SS3(0,2)=0;SS3(1,2)=0;SS3(2,2)=SS(0,2);
			SS3(0,0) = sqrt(SS3(0,0));SS3(1,1)=sqrt(SS3(1,1));SS3(2,2)=sqrt(SS3(2,2));
			for(int y=0;y<UU.Height();y++)
				for(int x=0;x<3;x++)
				{UU3(x,y)=UU(x,y);}

			for(int y=0;y<3;y++)
				for(int x=0;x<VV.Width();x++)
				{
					VV3(x,y)=VV(x,y);
				}

			MatrixMultiply(UU3,SS3,&RR);
			MatrixMultiply(SS3,VV3,&SCSS);
			CC=FindCmat(RR);
			MatDbl CCnew(3,3),SSn(3,3),QQ,newScene;
			MatDbl newU,newS,newV;
			CCnew(0,0)=CC(0,0);CCnew(1,1)=CC(0,1);CCnew(2,2)=CC(0,2);
			CCnew(1,0)=CCnew(0,1)=CC(0,3);
			CCnew(2,0)=CCnew(0,2)=CC(0,4);
			CCnew(2,1)=CCnew(1,2)=CC(0,5);
			Svd(CCnew,&newU,&newS,&newV);
			Set(&SSn,0);
			SSn(0,0)=sqrt(newS(0,0));
			SSn(1,1)=sqrt(newS(0,1));
			SSn(2,2)=sqrt(newS(0,2));
			MatrixMultiply(newU,SSn,&QQ);
			QQ=Inverse(QQ);
			MatrixMultiply(QQ,SCSS,&newScene);
			
			

			ofstream strucfile;
			strucfile.open("chalkbox.ply");
			strucfile<<"ply"<<endl<<"format ascii 1.0"<<endl<<"element vertex "<<69<<endl<<"property float x"<<endl<<"property float y"<<endl<<"property float z"<<endl<<"property uchar diffuse_red"<<endl<<"property uchar diffuse_green"<<endl<<"property uchar diffuse_blue"<<endl<<"end_header"<<endl<<endl;
			
				for(int x=0;x<newScene.Width();x++)
				{
					strucfile<<newScene(x,0)<<" "<<newScene(x,1)<<" "<<newScene(x,2)<<" "<<255<<" "<<0<<" "<<0<<" "<<endl;
				}
            
			strucfile.close();

			cout<<"cube.ply and chalkbox.ply"<<endl;
			EventLoop();
		}
	}
	else
	{
		// TODO: change error code to suit your needs
		_tprintf(_T("Fatal Error: GetModuleHandle failed\n"));
		nRetCode = 1;
	}

	return nRetCode;
}
